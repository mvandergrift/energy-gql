# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Time

type FoodEaten {
    id: Int!
    name: String!
    size: Float!
    food: Food!
}

input NewFoodEaten {
    mealId: Int!
    foodId: Int!
    size: Float!
    unitId: Int!
}

input NewFood {
    name: String!
    calories: Int!
    foodImg: String
    fat: Float
    satFat: Float
    carbs: Float
    fiber: Float
    sugar: Float
    sodium: Float
    protein: Float
    imgUrl: String
    unitId: Int
    id: Int
}

type Food {
    id: Int!
    name: String!
    calories: Int!
    fat: Float
    satFat: Float
    carbs: Float
    fiber: Float
    sugar: Float
    sodium: Float
    protein: Float
    imgUrl: String
    unit: Unit
}

type Unit {
    id: Int!
    name: String!
    unitType: UnitType!
}

type UnitType {
    id: Int!
    name: String!
}

type Meal {
    id: Int!
    mealDate: Time!
    mealTypeId: Int!
    mealType: MealType!
    user: User
    foodEaten: [FoodEaten!]!
}

input NewMeal {
    mealDate: Time!
    mealTypeId: Int!
    userId: Int!
}

type MealType {
    id: Int!
    name: String!
}

type User {
    id: Int!
    username: String!
    firstName: String!
    lastName: String!
}

type Note {
    id: Int!
    noteDate: Time!
    subject: String!
    content: String!
}

input NewNote {
    id: Int
    noteDate: Time!
    subject: String!
    content: String!
    userId: Int!
}

type Activity {
    id: Int!
    name: String!
    imgURL: String
}

input NewActivity {
    id: Int
    name: String!
    userId: Int!
    imgURL: String
}

type Workout {
    id: Int!
    user: User!
    activityDate: Time!
    activity: Activity!
    duration: Int
    calories: Float
    intensity: Float
    distance: Float
    startTime: Time
    endTime: Time
    attribute: Int
    comment: String
}

input NewWorkout {
    id: Int
    userId: Int!
    activityDate: Time!
    activityId: Int!
    duration: Int
    calories: Float
    intensity: Float
    distance: Float
    startTime: Time
    endTime: Time
    comment: String
}

enum Logic {
    AND
    OR
}

enum Operator {
    EQUAL
    NOT_EQUAL
    GREATOR
    LESS
    GREATOR_EQUAL
    LESS_EQUAL
    CONTAINS
    STARTS_WITH
    IS_NULL
    IS_NOT_NULL
}

input PredicateGroup {
    predicates: [Predicate!]!
    logic: Logic!
}

input Predicate {
    name: String
    values: [String!]
    operator: Operator
    innerPredicate: PredicateGroup
}

type PredicateResult {
    query: String
}

type Query {
    allMeals(userId: Int): [Meal!]!
    mealsForDay(userId: Int!, date: Time!): [Meal!]!
    allFoods(userId: Int): [Food!]!
    allUnits: [Unit!]!
    unitsForFood(foodId: Int): [Unit!]!
    notes(userId: Int, date: Time): [Note!]!
    workoutsForDay(userId: Int!, date: Time, attributes: [Int!]): [Workout!]!
    workoutQuery(filter: PredicateGroup): [Workout!]!
}

type Mutation {
    addFood(food: NewFood!): Food
    deleteFood(id: Int!): Food
    addFoodEaten(foodEaten: NewFoodEaten!): FoodEaten
    deleteFoodEaten(id: Int!): FoodEaten
    addMealForDay(meal: NewMeal!): Meal!
    addNote(note: NewNote!): Note
    deleteNote(id: Int!): Note
    deleteWorkout(id: Int!): Workout
}
